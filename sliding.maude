fmod SLIDING-PUZZLE-DEFINITIONS is

    sort Puzzle .
    ---subsort Tile < Puzzle .

endfm

fmod COORDS is
    protecting INT .

    sort Coords .

    op _;_ : Int Int -> Coords [ ctor ] .

    ---used for searching function in matrix
    vars x y : Int .
    op incrementRow : Coords -> Coords .
    eq incrementRow(x ; y) = (x + 1) ; y .

    op incrementCol : Coords -> Coords .
    eq incrementCol(x ; y) = x ; (y + 1) .

    op decrementRow : Coords -> Coords .
    eq decrementRow(x ; y) = (x - 1) ; y .

    op decrementCol : Coords -> Coords .
    eq decrementCol(x ; y) = x ; (y - 1) .

endfm

fmod TILE is
    protecting COORDS .

    sort Value .

    ops one two three four five six seven eight empty : -> Value [ ctor ] .

    var tile : Value .
    var c : Coords .

    op isTileInCorrectPlace : Value Coords -> Bool .
    eq isTileInCorrectPlace(one, (0 ; 0)) = true .
    eq isTileInCorrectPlace(two, (0 ; 1)) = true .
    eq isTileInCorrectPlace(three, (0 ; 2)) = true .
    eq isTileInCorrectPlace(four, (1 ; 0)) = true .
    eq isTileInCorrectPlace(five, (1 ; 1)) = true .
    eq isTileInCorrectPlace(six, (1 ; 2)) = true .
    eq isTileInCorrectPlace(seven, (2 ; 0)) = true .
    eq isTileInCorrectPlace(eight, (2 ; 1)) = true .
    eq isTileInCorrectPlace(tile, c) = false [ owise ] .

endfm


fmod VECTOR is
    protecting INT .
    sorts Element Vector .
    subsort Element < Vector .

    op _,_ : Vector Vector -> Vector [ assoc id: nil ] .
    op nil : -> Vector [ ctor ] .

    op len : Vector -> Int .

    var head : Element .
    var tail : Vector .
    eq len(nil) = 0 .
    eq len(head, tail) = 1 + len(tail) .

    var N : Int .

    op getElementByIndex : Vector Int -> Element .
    eq getElementByIndex(head, tail, 0) = head .
    eq getElementByIndex(head, tail, N) = getElementByIndex(tail, N - 1) .

    var E : Element .
    
    op insertElementIntoVector : Vector Element Int -> Vector .
    eq insertElementIntoVector((head, tail), E, 0) = E, tail .
    eq insertElementIntoVector((head, tail), E, N) = head, insertElementIntoVector(tail, E, N - 1) [ owise ] . 

endfm

fmod MATRIX is
    protecting VECTOR .
    sort Matrix .
    subsort Vector < Matrix .

    op _|_ : Matrix Matrix -> Matrix [ assoc id: mnil ] .
    op mnil : -> Matrix [ ctor ] .

    var m_head : Vector .
    var m_tail : Matrix .
    vars row col : Int .

    op getElementByIndexes : Matrix Int Int -> Element .
    eq getElementByIndexes(m_head | m_tail, 0, col) = getElementByIndex(m_head, col) .
    eq getElementByIndexes(m_head | m_tail, row, col) = getElementByIndexes(m_tail, row - 1, col) .

    var E : Element .
    op insertElementIntoMatrix : Matrix Element Int Int -> Matrix .
    eq insertElementIntoMatrix((m_head | m_tail), E, 0, col) = insertElementIntoVector(m_head, E, col) | m_tail .
    eq insertElementIntoMatrix((m_head | m_tail), E, row, col) = m_head | insertElementIntoMatrix(m_tail, E, row - 1, col) .

endfm

fmod PUZZLE is
    protecting TILE .
    protecting MATRIX .

    sort Puzzle .
    sort Line .

    subsort Puzzle < Matrix .
    subsort Value < Element .
    subsort Line < Vector .

    var head value : Value .
    var tail : Vector .
    var line : Vector .
    var puzzle : Matrix .
    var N x y : Int .

    op getElementByCoords : Matrix Coords -> Value .
    eq getElementByCoords(puzzle, (x ; y)) = getElementByIndexes(puzzle, x, y) .

    op getColumnFromValue : Vector Value -> Int .
    ceq getColumnFromValue((head, tail), value) = 0 if head == value .
    ceq getColumnFromValue(tail, value) = 50 if tail == nil .
    eq getColumnFromValue((head, tail), value) = 1 + getColumnFromValue(tail, value) [ owise ] .

    op getPositionFromValue : Matrix Value -> Coords .
    ceq getPositionFromValue((line | puzzle), value) = 0 ; getColumnFromValue(line, value) if getColumnFromValue(line, value) < 3 .
    eq getPositionFromValue((line | puzzle), value) = incrementRow(getPositionFromValue(puzzle, value)) [ owise ] .

    op getEmptyPosition : Matrix -> Coords .
    eq getEmptyPosition(puzzle) = getPositionFromValue(puzzle, empty) .

    op insertElementIntoPuzzle : Matrix Value Coords -> Matrix .
    eq insertElementIntoPuzzle(puzzle, value, (x ; y)) = insertElementIntoMatrix(puzzle, value, x, y) .

endfm



fmod MOVES is
    protecting INT .
    protecting VECTOR .
    protecting COORDS .
    protecting MATRIX .
    protecting PUZZLE .

    sort Move .
    subsort Bool < Element .
    ops LEFT UP RIGHT DOWN : -> Move [ ctor ] .

    vars X Y : Int .
    op getAvailableMoves : Coords -> Vector .
    eq getAvailableMoves(X ; Y) = (Y > 0, X > 0, Y < 2, X < 2) .

    var M : Matrix .

    op move : Matrix Move -> Matrix .
    ---eq move(M, UP) = insertElementIntoPuzzle( insertElementIntoPuzzle( M, getElementByCoords( decrementRow( getEmptyPosition( M ) ) ), getEmptyPosition( M ) ), empty, decrementRow( getEmptyPosition( M ) ) ) .
    eq move(M, UP) = insertElementIntoPuzzle(insertElementIntoPuzzle(M, empty, decrementRow( getEmptyPosition( M ) ) ), getElementByCoords(M, decrementRow(getEmptyPosition(M))), getEmptyPosition(M)) .
    eq move(M, DOWN) = insertElementIntoPuzzle(insertElementIntoPuzzle(M, empty, incrementRow( getEmptyPosition( M ) ) ), getElementByCoords(M, incrementRow(getEmptyPosition(M))), getEmptyPosition(M)) .
    eq move(M, LEFT) = insertElementIntoPuzzle(insertElementIntoPuzzle(M, empty, decrementCol( getEmptyPosition( M ) ) ), getElementByCoords(M, decrementCol(getEmptyPosition(M))), getEmptyPosition(M)) .
    eq move(M, RIGHT) = insertElementIntoPuzzle(insertElementIntoPuzzle(M, empty, incrementCol( getEmptyPosition( M ) ) ), getElementByCoords(M, incrementCol(getEmptyPosition(M))), getEmptyPosition(M)) .

endfm

mod SLIDING-PUZZLE-GAME is
    protecting PUZZLE .
    protecting MOVES .

    op initial : -> Matrix .
    eq initial = (three, one, two) | (seven, empty, four) | (five, eight, six) .

endm